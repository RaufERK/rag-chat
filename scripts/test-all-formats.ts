#!/usr/bin/env tsx

import fs from 'fs/promises'
import path from 'path'
import FormData from 'form-data'
import fetch from 'node-fetch'

/**
 * –¢–µ—Å—Ç –≤—Å–µ—Ö 4 —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API
 */

interface TestFile {
  name: string
  path: string
  format: string
}

const TEST_FILES: TestFile[] = [
  {
    name: 'sample.txt',
    path: 'test-data/txt/sample.txt',
    format: 'TXT',
  },
  {
    name: '–ü—Ä–∏–∑—ã–≤_–æ_–¥–µ–º–∞–≥–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏_–∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤.docx',
    path: 'test-data/docx/–ü—Ä–∏–∑—ã–≤_–æ_–¥–µ–º–∞–≥–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏_–∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤.docx',
    format: 'DOCX',
  },
  {
    name: 'test_file_doc.doc',
    path: 'test-data/doc/test_file_doc.doc',
    format: 'DOC',
  },
  {
    name: 'Healing_disp.pdf',
    path: 'test-data/pdf/Healing_disp.pdf',
    format: 'PDF',
  },
]

async function testFormat(testFile: TestFile): Promise<boolean> {
  try {
    console.log(`\nüß™ Testing ${testFile.format}: ${testFile.name}`)

    const filePath = path.join(process.cwd(), testFile.path)
    const fileBuffer = await fs.readFile(filePath)

    console.log(`üìä Size: ${fileBuffer.length} bytes`)

    // Create form data
    const formData = new FormData()
    formData.append('file', fileBuffer, {
      filename: testFile.name,
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
      contentType: getContentType(testFile.name),
    })
    formData.append('testMode', 'true')

    // Upload file
    const response = await fetch('http://localhost:3000/api/upload', {
      method: 'POST',
      body: formData,
    })

    console.log(`üìä Status: ${response.status} ${response.statusText}`)

    if (response.ok) {
      const result = await response.json()

      if (result.existing) {
        console.log(`‚úÖ Success! File already exists in database`)
        console.log(`üìÅ File ID: ${result.fileId}`)
        console.log(`üìÑ Filename: ${result.filename}`)
        return true
      }

      console.log(`‚úÖ Success! Processor: ${result.processor}`)
      console.log(`üìù Text length: ${result.textLength} characters`)
      console.log(
        `üìä Chunks: ${result.chunksCount || 'N/A'}, Avg tokens: ${
          result.averageTokensPerChunk || 'N/A'
        }`
      )
      console.log(
        `üìÑ Preview: "${
          result.preview ? result.preview.substring(0, 100) : 'N/A'
        }..."`
      )
      return true
    } else {
      const errorText = await response.text()
      console.log(`‚ùå Failed: ${errorText}`)
      return false
    }
  } catch (error) {
    console.error(`‚ùå Error testing ${testFile.format}:`, error.message)
    return false
  }
}

function getContentType(filename: string): string {
  const ext = path.extname(filename).toLowerCase()
  switch (ext) {
    case '.txt':
      return 'text/plain'
    case '.pdf':
      return 'application/pdf'
    case '.docx':
      return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    case '.doc':
      return 'application/msword'
    default:
      return 'application/octet-stream'
  }
}

async function testAllFormats() {
  console.log('üöÄ Testing all 4 file formats...')

  const results: boolean[] = []

  for (const testFile of TEST_FILES) {
    const success = await testFormat(testFile)
    results.push(success)
  }

  console.log('\nüìã SUMMARY:')
  TEST_FILES.forEach((file, index) => {
    const status = results[index] ? '‚úÖ' : '‚ùå'
    console.log(`${status} ${file.format}: ${file.name}`)
  })

  const successCount = results.filter((r) => r).length
  console.log(
    `\nüéØ Total: ${successCount}/${TEST_FILES.length} formats working`
  )

  if (successCount === TEST_FILES.length) {
    console.log('üéâ ALL FORMATS WORKING! Ready for production!')
  } else {
    console.log('‚ö†Ô∏è  Some formats need fixing.')
  }
}

if (require.main === module) {
  testAllFormats()
}
