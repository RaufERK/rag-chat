/**
 * Test script for Multi-Format File Upload
 * Tests the new upload API with different file formats
 */

import fs from 'fs'
import path from 'path'
import FormData from 'form-data'
import fetch from 'node-fetch'

const API_BASE = 'http://localhost:3000'
const TEST_FILES_DIR = path.join(process.cwd(), 'test-files')

// Mock test files for different formats
const testFiles = [
  {
    name: 'test.txt',
    content: `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TXT —Ñ–æ—Ä–º–∞—Ç–∞.
    
–î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
–ó–¥–µ—Å—å –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.

–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞, —Ä–∞–∑–¥–µ–ª—è—Ç—å –µ–≥–æ –Ω–∞ —á–∞–Ω–∫–∏
–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
–≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ RAG —Å–∏—Å—Ç–µ–º–µ.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞.`,
    format: 'txt',
    mimeType: 'text/plain',
  },
  {
    name: 'test.fb2',
    content: `<?xml version="1.0" encoding="utf-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0">
  <description>
    <title-info>
      <book-title>–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ FB2</book-title>
      <author>
        <first-name>–¢–µ—Å—Ç</first-name>
        <last-name>–ê–≤—Ç–æ—Ä</last-name>
      </author>
    </title-info>
  </description>
  <body>
    <section>
      <title><p>–ì–ª–∞–≤–∞ 1</p></title>
      <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ FB2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.</p>
      <p>FB2 —Ñ–æ—Ä–º–∞—Ç —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.</p>
      <p>–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ XML —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∞–±–∑–∞—Ü—ã.</p>
      <p>–í —ç—Ç–æ–º —Ç–µ—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã.</p>
      <p>–ö–∞–∂–¥—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π.</p>
      <p>–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∞–Ω–∫–∏.</p>
      <p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏.</p>
    </section>
  </body>
</FictionBook>`,
    format: 'fb2',
    mimeType: 'application/x-fictionbook+xml',
  },
]

async function setupTestFiles() {
  console.log('üìÅ Setting up test files...')

  // Ensure test directory exists
  if (!fs.existsSync(TEST_FILES_DIR)) {
    fs.mkdirSync(TEST_FILES_DIR)
  }

  // Create test files
  for (const testFile of testFiles) {
    const filePath = path.join(TEST_FILES_DIR, testFile.name)
    fs.writeFileSync(filePath, testFile.content, 'utf-8')
    console.log(`   ‚úÖ Created: ${testFile.name}`)
  }
}

async function testFileUpload(fileName: string, format: string) {
  console.log(`\nüì§ Testing ${format.toUpperCase()} upload: ${fileName}`)

  const filePath = path.join(TEST_FILES_DIR, fileName)

  if (!fs.existsSync(filePath)) {
    console.log(`   ‚ùå File not found: ${filePath}`)
    return false
  }

  try {
    const formData = new FormData()
    formData.append('file', fs.createReadStream(filePath))

    console.log('   üîÑ Sending upload request...')
    const response = await fetch(`${API_BASE}/api/upload`, {
      method: 'POST',
      body: formData,
    })

    const responseData = await response.json()

    console.log(`   üìä Response status: ${response.status}`)

    if (response.ok) {
      console.log('   ‚úÖ Upload successful!')
      console.log(`      - Format: ${responseData.fileInfo?.format}`)
      console.log(`      - Processor: ${responseData.fileInfo?.processor}`)
      console.log(`      - Chunks: ${responseData.fileInfo?.chunks}`)
      console.log(`      - Vectors: ${responseData.fileInfo?.vectorsCreated}`)
      if (responseData.fileInfo?.title) {
        console.log(`      - Title: ${responseData.fileInfo.title}`)
      }
      return true
    } else {
      console.log('   ‚ùå Upload failed!')
      console.log(`      - Error: ${responseData.error}`)
      console.log(`      - Details: ${responseData.details}`)
      return false
    }
  } catch (error) {
    console.log('   ‚ùå Request failed:', error.message)
    return false
  }
}

async function testSupportedFormats() {
  console.log('\nüìã Testing supported formats detection...')

  try {
    // Test with unsupported format
    const unsupportedFile = path.join(TEST_FILES_DIR, 'test.xyz')
    fs.writeFileSync(unsupportedFile, 'This is an unsupported format')

    const formData = new FormData()
    formData.append('file', fs.createReadStream(unsupportedFile))

    const response = await fetch(`${API_BASE}/api/upload`, {
      method: 'POST',
      body: formData,
    })

    const responseData = await response.json()

    if (
      response.status === 400 &&
      responseData.error?.includes('Unsupported file format')
    ) {
      console.log('   ‚úÖ Unsupported format correctly rejected')
      console.log(
        `      - Supported formats: ${
          responseData.supportedFormats?.join(', ') || 'Not provided'
        }`
      )
    } else {
      console.log('   ‚ùå Unsupported format validation failed')
    }

    // Clean up
    fs.unlinkSync(unsupportedFile)
  } catch (error) {
    console.log('   ‚ùå Format test failed:', error.message)
  }
}

async function runMultiFormatTests() {
  console.log('üß™ Multi-Format File Upload Test Suite\n')

  // Setup test files
  await setupTestFiles()

  // Test each supported format
  let successCount = 0
  let totalTests = 0

  for (const testFile of testFiles) {
    totalTests++
    const success = await testFileUpload(testFile.name, testFile.format)
    if (success) successCount++
  }

  // Test format validation
  await testSupportedFormats()

  // Summary
  console.log('\n' + '='.repeat(50))
  console.log('üìä TEST SUMMARY')
  console.log('='.repeat(50))
  console.log(`‚úÖ Successful uploads: ${successCount}/${totalTests}`)
  console.log(
    `üìÑ Formats tested: ${testFiles
      .map((f) => f.format.toUpperCase())
      .join(', ')}`
  )

  if (successCount === totalTests) {
    console.log('üéâ All multi-format tests passed!')
  } else {
    console.log('‚ö†Ô∏è Some tests failed. Check the logs above.')
  }

  // Cleanup test files
  console.log('\nüßπ Cleaning up test files...')
  try {
    fs.rmSync(TEST_FILES_DIR, { recursive: true, force: true })
    console.log('   ‚úÖ Test files cleaned up')
  } catch (error) {
    console.log('   ‚ö†Ô∏è Cleanup failed:', error.message)
  }
}

// Run tests
runMultiFormatTests().catch(console.error)
