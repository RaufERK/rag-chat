import { SettingsService } from './settings-service'
import {
  OptimizedTextSplitter,
  ChunkingOptions,
} from './text-splitter-optimized'

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∏–Ω–≥–æ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export class ChunkingService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞–Ω–∫–∏–Ω–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  static async getChunkingOptions(): Promise<ChunkingOptions> {
    try {
      const [chunkSizeTokens, chunkOverlapTokens, preserveStructure] =
        await Promise.all([
          SettingsService.getSetting('CHUNK_SIZE_TOKENS'),
          SettingsService.getSetting('CHUNK_OVERLAP_TOKENS'),
          SettingsService.getSetting('PRESERVE_STRUCTURE'),
        ])

      return {
        chunkSize: chunkSizeTokens
          ? parseInt(chunkSizeTokens.parameter_value)
          : 1000,
        chunkOverlap: chunkOverlapTokens
          ? parseInt(chunkOverlapTokens.parameter_value)
          : 200,
        preserveStructure: preserveStructure
          ? preserveStructure.parameter_value === 'true'
          : true,
      }
    } catch (error) {
      console.warn(
        '‚ö†Ô∏è Failed to load chunking settings, using defaults:',
        error
      )

      // Fallback to default values
      return {
        chunkSize: 1000,
        chunkOverlap: 200,
        preserveStructure: true,
      }
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  static async splitText(text: string) {
    const options = await this.getChunkingOptions()

    console.log(
      `üìù [CHUNKING] Using settings: ${options.chunkSize} tokens, ${options.chunkOverlap} overlap, structure: ${options.preserveStructure}`
    )

    return OptimizedTextSplitter.splitTextOptimized(text, options)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞–Ω–∫–∏–Ω–≥–∞
   */
  static async getChunkingInfo() {
    const options = await this.getChunkingOptions()

    return {
      chunkSizeTokens: options.chunkSize,
      chunkOverlapTokens: options.chunkOverlap,
      preserveStructure: options.preserveStructure,
      estimatedCharsPerChunk: options.chunkSize * 3.5, // –ø—Ä–∏–º–µ—Ä–Ω–æ 1 —Ç–æ–∫–µ–Ω = 3.5 —Å–∏–º–≤–æ–ª–∞
    }
  }
}
