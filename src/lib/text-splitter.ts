import { FILE_CONFIG } from './file-config'

export interface TextChunk {
  content: string
  index: number
  start: number
  end: number
}

export class TextSplitter {
  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º - MEMORY PROTECTED
   */
  static splitText(text: string): TextChunk[] {
    // Memory protection: limit text size
    if (text.length > FILE_CONFIG.MAX_TEXT_LENGTH) {
      console.warn(
        `üö® CRITICAL: Text too large (${text.length} chars), truncating to ${FILE_CONFIG.MAX_TEXT_LENGTH}`
      )
      text =
        text.substring(0, FILE_CONFIG.MAX_TEXT_LENGTH) +
        '\n\n[... —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã ...]'
    }

    const chunks: TextChunk[] = []
    const chunkSize = FILE_CONFIG.CHUNK_SIZE
    const overlap = FILE_CONFIG.CHUNK_OVERLAP

    let start = 0
    let index = 0

    while (
      start < text.length &&
      chunks.length < FILE_CONFIG.MAX_CHUNKS_PER_FILE
    ) {
      const end = Math.min(start + chunkSize, text.length)
      const content = text.slice(start, end)

      chunks.push({
        content,
        index,
        start,
        end,
      })

      start = end - overlap
      index++

      // –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (start >= text.length) break
    }

    console.log(`üìù TextSplitter created ${chunks.length} chunks`)
    return chunks
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º —Å —É—á–µ—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
   */
  static splitBySentences(text: string): TextChunk[] {
    const chunks: TextChunk[] = []
    const maxChunkSize = FILE_CONFIG.CHUNK_SIZE

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const sentences = text.split(/[.!?]+/).filter((s) => s.trim().length > 0)

    let currentChunk = ''
    let start = 0
    let index = 0

    for (const sentence of sentences) {
      const sentenceWithPunctuation = sentence + '.'

      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
      if (
        currentChunk.length + sentenceWithPunctuation.length > maxChunkSize &&
        currentChunk.length > 0
      ) {
        chunks.push({
          content: currentChunk.trim(),
          index,
          start,
          end: start + currentChunk.length,
        })

        currentChunk = sentenceWithPunctuation
        start += currentChunk.length
        index++
      } else {
        currentChunk += sentenceWithPunctuation
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk.trim().length > 0) {
      chunks.push({
        content: currentChunk.trim(),
        index,
        start,
        end: start + currentChunk.length,
      })
    }

    return chunks
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –∞–±–∑–∞—Ü–∞–º
   */
  static splitByParagraphs(text: string): TextChunk[] {
    const chunks: TextChunk[] = []
    const paragraphs = text.split(/\n\s*\n/).filter((p) => p.trim().length > 0)

    let start = 0

    paragraphs.forEach((paragraph, index) => {
      const trimmedParagraph = paragraph.trim()

      chunks.push({
        content: trimmedParagraph,
        index,
        start,
        end: start + paragraph.length,
      })

      start += paragraph.length + 2 // +2 –¥–ª—è \n\n
    })

    return chunks
  }

  /**
   * –£–º–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
   */
  static smartSplit(text: string): TextChunk[] {
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (text.length <= FILE_CONFIG.CHUNK_SIZE) {
      return [
        {
          content: text,
          index: 0,
          start: 0,
          end: text.length,
        },
      ]
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    const sentenceChunks = this.splitBySentences(text)

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∞–Ω–∫–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
    const mergedChunks: TextChunk[] = []
    let currentChunk = ''
    let currentStart = 0
    let index = 0

    for (const chunk of sentenceChunks) {
      if (
        currentChunk.length + chunk.content.length <=
        FILE_CONFIG.CHUNK_SIZE
      ) {
        currentChunk += (currentChunk ? ' ' : '') + chunk.content
      } else {
        if (currentChunk) {
          mergedChunks.push({
            content: currentChunk,
            index,
            start: currentStart,
            end: currentStart + currentChunk.length,
          })
          index++
        }
        currentChunk = chunk.content
        currentStart = chunk.start
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk) {
      mergedChunks.push({
        content: currentChunk,
        index,
        start: currentStart,
        end: currentStart + currentChunk.length,
      })
    }

    return mergedChunks
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
   */
  static cleanText(text: string): string {
    return text
      .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
      .replace(/\n\s*\n/g, '\n\n') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      .trim()
  }
}
