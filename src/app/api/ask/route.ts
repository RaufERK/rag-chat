import { NextRequest, NextResponse } from 'next/server'
import { getEmbedding, getChatCompletion } from '@/lib/openai'
import { searchSimilar } from '@/lib/qdrant'
import { AskRequest, AskResponse, ChatMessage, Document } from '@/lib/types'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
function reRankDocuments(documents: Document[], question: string): Document[] {
  if (!documents || documents.length === 0) return []

  // –ü—Ä–æ—Å—Ç–æ–µ –ª–µ–∫—Å–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  const questionLower = question.toLowerCase()
  const spiritualKeywords = [
    '–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å',
    '–º–µ–¥–∏—Ç–∞—Ü–∏—è',
    '–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ',
    '—Å–æ–∑–Ω–∞–Ω–∏–µ',
    '—á–∞–∫—Ä–∞',
    '—ç–Ω–µ—Ä–≥–∏—è',
    '–∫–∞—Ä–º–∞',
    '—Ä–µ–∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏—è',
    '–≤–æ–∑–Ω–µ—Å–µ–Ω–∏–µ',
    '–º–∞—Å—Ç–µ—Ä',
    '—É—á–∏—Ç–µ–ª—å',
    '–º–∞–π—Ç—Ä–µ–π—è',
    '—Ü–µ–ª–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
    '–ª—é–±–æ–≤—å',
    '–º–∏—Ä',
  ]

  return documents
    .map((doc) => {
      let score = 0
      const content = doc.content.toLowerCase()

      // –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–æ—Ä –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é —Å–ª–æ–≤ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
      const questionWords = questionLower
        .split(/\s+/)
        .filter((w) => w.length > 2)
      questionWords.forEach((word) => {
        if (content.includes(word)) score += 2
      })

      // –ë–æ–Ω—É—Å –∑–∞ –¥—É—Ö–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      spiritualKeywords.forEach((keyword) => {
        if (content.includes(keyword) || questionLower.includes(keyword)) {
          score += 3
        }
      })

      // –ë–æ–Ω—É—Å –∑–∞ –º–∞—Ç—á–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      if (doc.metadata?.category) {
        if (questionLower.includes(doc.metadata.category.toLowerCase()))
          score += 5
        if (
          doc.metadata.category === 'spiritual' ||
          doc.metadata.category === 'teaching'
        )
          score += 2
      }
      if (
        doc.metadata?.topic &&
        questionLower.includes(doc.metadata.topic.toLowerCase())
      ) {
        score += 4
      }

      return { ...doc, relevanceScore: score }
    })
    .sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0))
    .slice(0, 6) // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ø-6 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
function formatEnhancedContext(documents: Document[]): string | undefined {
  if (!documents || documents.length === 0) return undefined

  const formattedDocs = documents.map((doc, index) => {
    const metadata = doc.metadata
      ? `[${doc.metadata.category || 'general'}/${
          doc.metadata.topic || 'mixed'
        }]`
      : '[unknown/unknown]'
    const relevanceInfo =
      'relevanceScore' in doc
        ? ` (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${(doc as any).relevanceScore})`
        : ''
    return `--- –ò—Å—Ç–æ—á–Ω–∏–∫ ${
      index + 1
    } ${metadata}${relevanceInfo} ---\n${doc.content.trim()}`
  })

  return formattedDocs.join('\n\n')
}

export async function POST(request: NextRequest) {
  try {
    const body: AskRequest = await request.json()
    const { question } = body

    if (!question || typeof question !== 'string') {
      return NextResponse.json(
        { error: 'Question is required and must be a string' },
        { status: 400 }
      )
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞
    const questionEmbedding = await getEmbedding(question)

    // 2. –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ Qdrant
    let similarDocuments: any[] = []
    let hasQdrantError = false

    try {
      console.log('üîç Searching for similar documents...')
      similarDocuments = await searchSimilar(questionEmbedding, 8, 0.3)
      console.log(`üìä Found ${similarDocuments.length} similar documents`)
    } catch (qdrantError) {
      console.error('‚ùå Qdrant error:', qdrantError)
      hasQdrantError = true
      similarDocuments = []
    }

    // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º re-ranking –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const reRankedDocuments = reRankDocuments(similarDocuments, question)
    console.log(
      `üìä Re-ranked ${reRankedDocuments.length} documents by relevance`
    )

    // 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const context = formatEnhancedContext(reRankedDocuments)

    if (context) {
      console.log('üìù Using enhanced RAG context for answer generation')
    } else {
      if (hasQdrantError) {
        console.log('‚ö†Ô∏è Qdrant unavailable, using GPT only')
      } else {
        console.log('‚ö†Ô∏è No relevant documents found, using GPT only')
      }
    }

    // 5. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: ChatMessage = {
      role: 'user',
      content: question,
    }

    // 6. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT-4o —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const answer = await getChatCompletion([userMessage], context)

    // 7. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const response: AskResponse = {
      answer,
      sources: reRankedDocuments.length > 0 ? reRankedDocuments : undefined,
      hasContext: reRankedDocuments.length > 0,
      sourcesCount: reRankedDocuments.length,
      searchScore: reRankedDocuments.length > 0 ? 0.9 : undefined, // –ü–æ–≤—ã—Å–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –±–ª–∞–≥–æ–¥–∞—Ä—è re-ranking
      qdrantStatus: hasQdrantError ? 'error' : 'ok',
    }

    return NextResponse.json(response)
  } catch (error) {
    console.error('Error in /api/ask:', error)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å Qdrant
    if (error instanceof Error && error.message.includes('QDRANT_URL')) {
      return NextResponse.json(
        {
          error:
            'Vector database is not configured. Please set up Qdrant or use mock mode.',
          details: 'Qdrant configuration is missing or invalid',
        },
        { status: 503 }
      )
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
